package com.petHis.contract.data;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class PetInsurance extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5b83811115611fef576000848401525b50505050565b6000601f19601f8301169050919050565b61200f81611f9c565b811461201a57600080fd5b5056fea2646970667358221220b7bc49aa8d5a8969293d69566cd2efe87abe94c398f06f32c53c453517de83b164736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","5b83811115611fef576000848401525b50505050565b6000601f19601f8301169050919050565b61200f81611f9c565b811461201a57600080fd5b5056fea2646970667358221220b7bc49aa8d5a8969293d69566cd2efe87abe94c398f06f32c53c453517de83b164736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"addInsurance(uint256,string,uint256,uint256,uint256,uint256,uint256)\",\"name\":\"addInsurance\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"insuranceCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_level1Num\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_level1Ratio\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_level2Num\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_level2Ratio\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_premium\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addPet(uint256,uint256,string)\",\"name\":\"addPet\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"petCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_ownerId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addUser(uint256,string,uint256)\",\"name\":\"addUser\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"userCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"claimInsurance(uint256,uint256)\",\"name\":\"claimInsurance\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_petId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_medicalExpense\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"getTradeLogsByUser(uint256)\",\"name\":\"getTradeLogsByUser\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct TradeLog[]\",\"indexed\":false,\"components\":[{\"name\":\"userName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"insuranceUserName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"tradeType\",\"type\":\"uint8\",\"internalType\":\"uint8\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"number\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"dynamic\":true,\"typeAsString\":\"(string,string,uint8,uint256,uint256)[]\"}]},{\"methodSignatureAsString\":\"insurances(uint256)\",\"name\":\"insurances\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"insurance_id\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"level_1_num\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"level_1_claim_ratio\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"level_2_num\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"level_2_claim_ratio\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"premium\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"pets(uint256)\",\"name\":\"pets\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"pet_id\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"insurance_id\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"insurance_end_at\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"purchaseInsurance(uint256,uint256,uint256)\",\"name\":\"purchaseInsurance\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_buyerId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_petId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_insuranceId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"tradeLogs(uint256,uint256)\",\"name\":\"tradeLogs\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"userName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"insuranceUserName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"tradeType\",\"type\":\"uint8\",\"internalType\":\"uint8\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint8\"},{\"name\":\"number\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"userPets(uint256,uint256)\",\"name\":\"userPets\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"componen","ts\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"users(uint256)\",\"name\":\"users\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"user_id\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDINSURANCE = "addInsurance";

    public static final String FUNC_ADDPET = "addPet";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_CLAIMINSURANCE = "claimInsurance";

    public static final String FUNC_GETTRADELOGSBYUSER = "getTradeLogsByUser";

    public static final String FUNC_INSURANCES = "insurances";

    public static final String FUNC_PETS = "pets";

    public static final String FUNC_PURCHASEINSURANCE = "purchaseInsurance";

    public static final String FUNC_TRADELOGS = "tradeLogs";

    public static final String FUNC_USERPETS = "userPets";

    public static final String FUNC_USERS = "users";

    protected PetInsurance(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addInsurance(BigInteger insuranceCount, String _name, BigInteger _level1Num, BigInteger _level1Ratio, BigInteger _level2Num, BigInteger _level2Ratio, BigInteger _premium) {
        final Function function = new Function(
                FUNC_ADDINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(insuranceCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_premium)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addInsurance(BigInteger insuranceCount, String _name, BigInteger _level1Num, BigInteger _level1Ratio, BigInteger _level2Num, BigInteger _level2Ratio, BigInteger _premium, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(insuranceCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_premium)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddInsurance(BigInteger insuranceCount, String _name, BigInteger _level1Num, BigInteger _level1Ratio, BigInteger _level2Num, BigInteger _level2Ratio, BigInteger _premium) {
        final Function function = new Function(
                FUNC_ADDINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(insuranceCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level1Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Num),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_level2Ratio),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_premium)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getAddInsuranceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDINSURANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue()
        );
    }

    public TransactionReceipt addPet(BigInteger petCount, BigInteger _ownerId, String _name) {
        final Function function = new Function(
                FUNC_ADDPET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(petCount),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_ownerId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPet(BigInteger petCount, BigInteger _ownerId, String _name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(petCount),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_ownerId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPet(BigInteger petCount, BigInteger _ownerId, String _name) {
        final Function function = new Function(
                FUNC_ADDPET,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(petCount),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_ownerId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getAddPetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public TransactionReceipt addUser(BigInteger userCount, String _name, BigInteger _amount) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addUser(BigInteger userCount, String _name, BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddUser(BigInteger userCount, String _name, BigInteger _amount) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userCount),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getAddUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt claimInsurance(BigInteger _petId, BigInteger _medicalExpense) {
        final Function function = new Function(
                FUNC_CLAIMINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_medicalExpense)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] claimInsurance(BigInteger _petId, BigInteger _medicalExpense, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLAIMINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_medicalExpense)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForClaimInsurance(BigInteger _petId, BigInteger _medicalExpense) {
        final Function function = new Function(
                FUNC_CLAIMINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_medicalExpense)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getClaimInsuranceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLAIMINSURANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public DynamicArray<TradeLog> getTradeLogsByUser(BigInteger _userId) throws ContractException {
        final Function function = new Function(FUNC_GETTRADELOGSBYUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<TradeLog>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> insurances(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_INSURANCES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue());
    }

    public Tuple4<BigInteger, String, BigInteger, BigInteger> pets(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_PETS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt purchaseInsurance(BigInteger _buyerId, BigInteger _petId, BigInteger _insuranceId) {
        final Function function = new Function(
                FUNC_PURCHASEINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_buyerId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_insuranceId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] purchaseInsurance(BigInteger _buyerId, BigInteger _petId, BigInteger _insuranceId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PURCHASEINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_buyerId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_insuranceId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPurchaseInsurance(BigInteger _buyerId, BigInteger _petId, BigInteger _insuranceId) {
        final Function function = new Function(
                FUNC_PURCHASEINSURANCE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_buyerId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_petId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_insuranceId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getPurchaseInsuranceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PURCHASEINSURANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> tradeLogs(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_TRADELOGS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue());
    }

    public BigInteger userPets(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_USERPETS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<BigInteger, String, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public static PetInsurance load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PetInsurance(contractAddress, client, credential);
    }

    public static PetInsurance deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(PetInsurance.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class TradeLog extends DynamicStruct {
        public String userName;

        public String insuranceUserName;

        public BigInteger tradeType;

        public BigInteger number;

        public BigInteger amount;

        public TradeLog(Utf8String userName, Utf8String insuranceUserName, Uint8 tradeType, Uint256 number, Uint256 amount) {
            super(userName,insuranceUserName,tradeType,number,amount);
            this.userName = userName.getValue();
            this.insuranceUserName = insuranceUserName.getValue();
            this.tradeType = tradeType.getValue();
            this.number = number.getValue();
            this.amount = amount.getValue();
        }

        public TradeLog(String userName, String insuranceUserName, BigInteger tradeType, BigInteger number, BigInteger amount) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(insuranceUserName),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(tradeType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(number),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount));
            this.userName = userName;
            this.insuranceUserName = insuranceUserName;
            this.tradeType = tradeType;
            this.number = number;
            this.amount = amount;
        }
    }
}
